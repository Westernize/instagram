
import streamlit as st
import openai
import os
from datetime import datetime
from gtts import gTTS



def ask_gpt(prompt, model):
    response = "초기화"
    openai.ChatCompletion.create(model=model, messages=prompt)
    system_message = response["choices"][0]["message"]
    return system_message["content"]



def main():
  
    st.set_page_config(
        page_title="채팅 비서 프로그램",
        layout="wide")

    flag_start = False


    if "chat" not in st.session_state:
        st.session_state["chat"] = []

    if "messages" not in st.session_state:
        st.session_state["messages"] = [{"role": "system", "content": "You are a thoughtful assistant. Respond to all input in 25 words and answer in korea"}]

    if "check_audio" not in st.session_state:
        st.session_state["check_audio"] = []

    
    st.header("채팅 비서 프로그램")

    st.markdown("---")


    with st.expander("채팅비서 프로그램에 관하여", expanded=True):
        st.write(
        """     
        202284062 이희찬 과제 제출
        """
        )

        st.markdown("")

   
    with st.sidebar:

        openai.api_key = st.text_input(label="OPENAI API 키", placeholder="Enter Your API Key", value="", type="password")

        st.markdown("---")

        model = st.radio(label="GPT 모델",options=["gpt-4", "gpt-3.5-turbo"])

        st.markdown("---")

        if st.button(label="초기화"):
            
            st.session_state["chat"] = []
            st.session_state["messages"] = [{"role": "system", "content": "You are a has personality assistant. Respond to all input in 25 words and answer in korea"}]

 
    col1, col2 =  st.columns(2)
    with col1:
        
        st.subheader("질문하기")
        
        
        question = st.text_input("질문을 입력하세요", "")

        if st.button("질문"):
            if question:
               
                now = datetime.now().strftime("%H:%M")
                st.session_state["chat"] = st.session_state["chat"] + [("🙋", now, question)]
                
                st.session_state["messages"] = st.session_state["messages"] + [{"role": "user", "content": question}]
                flag_start = True
            else:
                st.warning("질문을 입력하세요.")

    with col2:
    
        st.subheader("질문/답변")
        if flag_start:
          
            response = ask_gpt([{"role": "user", "content": question}], model)

 
            st.session_state["messages"] = st.session_state["messages"]+ [{"role": "system", "content": response}]

            now = datetime.now().strftime("%H:%M")
            st.session_state["chat"] = st.session_state["chat"]+ [("",now, response)]
            for sender, time, message in st.session_state["chat"]:
               for sender, time, message in st.session_state["chat"]:

                if sender == "user":
                    st.write(f'<div style="display:flex;align-items:center;"><div style="background-color:#007AFF;color:white;border-radius:12px;padding:8px 12px;margin-right:8px;">{message}</div><div style="font-size:0.8rem;color:gray;">{time}</div></div>', unsafe_allow_html=True)
                    st.write("")
                else:
                    st.write(f'<div style="display:flex;align-items:center;justify-content:flex-end;"><div style="background-color:lightgray;border-radius:12px;padding:8px 12px;margin-left:8px;">{message}</div><div style="font-size:0.8rem;color:gray;">{time}</div></div>', unsafe_allow_html=True)
                    st.write("")  
if __name__=="__main__":
    main()
